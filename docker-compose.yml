version: '3.8'

services:
  # Existing backend service (assuming it's named 'backend' or similar)
  # Ensure its environment variables can be configured to connect to the db service
  backend:
    build: ./backend
    ports:
      - "3001:3001" # Expose backend port
    env_file:
      - ./backend/.env # Load backend environment variables
    depends_on:
      - db
    volumes:
      - ./backend:/usr/src/app # Mount backend code
      - /usr/src/app/node_modules # Anonymous volume for node_modules
    # Add command to run migrations if applicable after db is up

  # Existing frontend service (assuming it's named 'frontend' or similar)
  frontend:
    build: ./frontend
    ports:
      - "3000:3000" # Expose frontend port
    env_file:
      - ./frontend/.env # Load frontend environment variables
    volumes:
      - ./frontend:/usr/src/app # Mount frontend code
      - /usr/src/app/node_modules
      - /usr/src/app/.next

  db:
    image: postgres:15-alpine
    container_name: verversite_db
    environment:
      POSTGRES_USER: ververuser # From backend/.env.example
      POSTGRES_PASSWORD: ververpassword # From backend/.env.example
      POSTGRES_DB: verversite # From backend/.env.example
    ports:
      - "5432:5432" # Expose PostgreSQL port to host
    volumes:
      - postgres_data:/var/lib/postgresql/data # Persist data

volumes:
  postgres_data: # Define the named volume for data persistence
