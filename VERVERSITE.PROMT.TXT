.
--- START OF REVISED PROMPT ---

من یک پروژه دارم که می‌خواهم آن را با استفاده از یک ریپازیتوری گیت (Git) و فرآیند کلون (git clone) و دریافت به‌روزرسانی‌ها (git pull) پیاده‌سازی کنی. هدف این است که بتوانم به سادگی سایت را روی سرورم کلون کرده، تنظیمات اولیه را انجام دهم، آن را اجرا کنم و هر موقع خواستم با git pull ارتقا دهم.

دلیل این رویکرد این است که سایت بسیار قابل حمل باشد و قابلیت انتقال داده‌ها حیاتی است (مثلاً بتوانم با یک فایل پشتیبان و دستورالعمل‌های مشخص، ۲۰۰۰۰ تاپیک را روی سرور جدید بارگذاری کنم).

بعد از هر مرحله (در روند توسعه توسط تو)، به این هدف اصلی بازگرد، پروژه را توسعه بده، دیباگ کن، سپس توسعه بده، دیباگ کن، سپس توسعه بده، آنالیز کن، و سپس توسعه بده و باگ‌زدایی کن.
آنقدر این کار را ادامه بده که بعد از اینکه دو روز (زمان تخمینی برای توسعه توسط تو) فعال بودی، سایت کاملاً آماده باشد.

من یک وب‌سایت دارم که می‌خواهم تمام آن را طوری طراحی و کدنویسی کنی که به راحتی روی یک محیط لوکال‌هاست استاندارد (که مشخصاتش را می‌دهم، مثلاً Node.js و PostgreSQL روی لینوکس) اجرا شود و همچنین بتوانم به سادگی برای آن IP، هاست و دامنه تهیه کرده و آن را مستقر کنم.

کدها و ساختار پروژه باید بسیار منعطف و هوشمند باشند؛ یعنی اگر در فرآیند اجرا یا توسعه با مشکلی مواجه شدند، راه‌حل‌های جایگزین (که تو در مستندات توضیح می‌دهی) وجود داشته باشد.
هر جا که دیدی دارد توکنت تمام می‌شود، صبر کن تا من بگویم ادامه بدهی.

باید بتوانم به راحتی مقادیری مانند آدرس دامنه (DOMAIN) و URL اصلی سایت، کلیدهای API، اطلاعات اتصال به دیتابیس و موارد مشابه را در فایل‌های پیکربندی مشخص (مانند فایل‌های .env یا مشابه) تنظیم کنم. مثلاً بتوانم HTTPS://LOCALHOST:3000 یا VERVERSITE.COM را وارد کنم.
این مقادیر باید به وضوح در مستندات پروژه (مثلاً README.md) ذکر شوند.

این یک پروژه سایتی شبیه ردیت یا نی‌نی‌سایت است؛ یک سایت انجمن.

یک سایت کامل بنویس به اسم "ور ور سایت" (Ver Ver Site).
شبیه یوتوب طراحی کن (ساده، همه‌چیز ساده، خیلی خیلی همه‌چیز فوق‌العاده ساده).
مثلاً یک دکمه به‌اضافه (+) بالای صفحه سمت راست بگذار که هرکس روی آن کلیک کرد، یعنی می‌خواهد تاپیک جدید بنویسد.

ویژگی‌های اصلی سایت:

انجمن و تعاملات:

قابلیت ایجاد تاپیک (عنوان، عکس، متن).

قابلیت شرکت در انجمن (ارسال کامنت).

پاسخ به کامنت (مانند ساختار تودرتوی Reddit).

لایک کردن تاپیک‌ها و کامنت‌ها.

مرتب‌سازی نمایش تاپیک‌ها بر اساس تعداد لایک‌ها یا زمان انتشار.

کاربران می‌توانند تاپیک‌ها و کامنت‌های خود را حذف کنند (اما ویرایش نکنند).

آپلود فایل (خصوصاً عکس). فشرده‌سازی خودکار عکس‌ها در سرور (کاهش ۷۰-۸0٪ حجم). اگر ویدیو آپلود شد، حجم آن نیز باید بهینه شود.

دنبال کردن کاربران دیگر.

صفحه پروفایل برای هر کاربر.

الگوریتم نمایش محتوا در صفحه اصلی (بسیار مهم، دقیقاً پیاده‌سازی شود):

مانند یوتیوب، بارگذاری تنبل (Lazy Loading) تاپیک‌ها با اسکرول.

صفحه اصلی یک فید واحد است، بدون دسته‌بندی قابل انتخاب توسط کاربر برای فیلتر اولیه. کاربران هیچ دخل و تصرفی در انتخاب اولیه تاپیک‌ها ندارند؛ سیستم مانند یوتیوب تاپیک‌ها را نمایش می‌دهد و برای هر کاربر تا حدی تصادفی و شخصی‌سازی شده است.

قاعده کلی توزیع محتوا:

۹۰٪ محتوا: برای امروز و دیروز.

۱۰٪ محتوا: از روزهای قبل‌تر (تاریخی).

جزئیات بخش ۹۰٪ (امروز و دیروز):

۶۰٪ برای امروز:

۱۰٪ از این ۶۰٪، تاپیک‌های پربازدید امروز.

بقیه (۵۰٪ از ۶۰٪) از تاپیک‌های کم‌بازدیدتر و تاپیک‌های جدید امروز.

۳۰٪ برای دیروز:

۲۰٪ از این ۳۰٪، تاپیک‌های پربازدید دیروز.

۵٪ از این ۳۰٪، تاپیک‌های کم‌بازدید دیروز.

۵٪ دیگر از این ۳۰٪ هم برای تاپیک‌هایی که در گذشته "خیلی بازدید خوردند" (بسیار محبوب بوده‌اند).

جزئیات بخش ۱۰٪ (تاریخی):

۴٪ از این ۱۰٪، برای روزهای کم‌بازدید قدیمی‌تر.

ملاک "بازدید": تعداد کامنت‌ها و کاربرانی که در بحث یک تاپیک شرکت کرده‌اند (به دلیل سادگی پیاده‌سازی و کاهش بار سرور نسبت به شمارش بازدید مستقیم).

دسته‌بندی‌ها و تم‌های داینامیک:

هر موضوعی که کاربر برای نوشتن تاپیک انتخاب می‌کند، چندین دسته‌بندی دارد: بحث علمی، بحث‌های زاییدن و نی‌نی‌سایتی، عشق، بیزینس، عمومی، و یکی دو تای دیگر (که بعداً مشخص می‌کنم).

وقتی کاربر موضوعی را برای ایجاد تاپیک انتخاب می‌کند، تم صفحه ایجاد تاپیک تغییر می‌کند.

وقتی کاربر در صفحه اصلی روی یک تاپیک کلیک می‌کند و وارد صفحه آن تاپیک می‌شود، تم آن صفحه با توجه به موضوع تاپیک تغییر می‌کند.

مثال علمی: پس‌زمینه مشکی، وکتورهای خطی و توخالی مرتبط با علم (تلسکوپ، ذره‌بین، کتاب)، شبیه پس‌زمینه تلگرام.

مثال عشق: پس‌زمینه سفید، المان‌های قلب و غیره.

صفحه اصلی (فید) تم دیفالت، شیک، زیبا و ساده دارد و هیچ تم خاصی بر اساس موضوع ندارد.

هوش مصنوعی (ضعیف اما کارآمد):

سیستم پیشنهاد تاپیک بعدی (شبیه پیشنهاد ویدیوی بعدی گوگل/یوتیوب). این می‌تواند ترکیبی از تاپیک‌های محبوب، جدید، مرتبط با علاقه‌مندی‌های کاربر (بر اساس تاریخچه) و تا حدی تصادفی باشد. (ترکیب رندوم، پربازدید، و ترندهای روزانه).

احراز هویت:

فقط ورود با گوگل. بدون ورود با ایمیل/رمز عبور یا شماره تلفن.

کلاینت آیدی گوگل: 293698260918-ll31bqfqtjppcmkvrssr65pss9k9hqtd.apps.googleusercontent.com

کلاینت سیکرت گوگل: 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

SEO (بهینه‌سازی برای موتورهای جستجو):

SSR واقعی برای React (ترجیحاً با Next.js به جای Create React App).

آدرس‌های URL منحصر به فرد و خوانا برای هر تاپیک (مثلاً: your_domain.com/topic/123/عنوان-تاپیک-شما).

ساختار HTML معنایی و بهینه.

تگ‌های متا پویا (title, description) برای هر صفحه تاپیک.

نقشه سایت XML (sitemap.xml) که به طور خودکار تولید و به‌روز شود.

فایل Robots.txt بهینه.

لینک‌دهی داخلی قوی.

تصاویر در جستجوی گوگل ظاهر شوند (alt text مناسب، نام فایل بهینه).

هر تاپیک یک پیج جدید باشد که گوگل همه را پیدا کند.

امنیت (بسیار مهم، جایزه ۲ میلیارد تومانی برای هک نشدن!):

جلوگیری از Injection (XSS, SQL Injection) با Prepared Statements و Sanitization & Escaping ورودی‌ها.

Broken Authentication & Session Management: توکن‌های امن، Hash کردن رمز عبور، انقضای توکن‌های سشن.

Sensitive Data Exposure: HTTPS (SSL/TLS) برای تمام ارتباطات.

جلوگیری از XML External Entities (XXE).

Broken Access Control: کنترل دقیق دسترسی‌ها.

Security Misconfiguration: پیکربندی امن سرورها و برنامه‌ها.

Cross-Site Request Forgery (CSRF): استفاده از توکن‌های CSRF (مثلاً با csurf یا مشابه).

Firewall و ابزارهای امنیتی: تنظیمات WAF ساده در Nginx (یا وب سرور دیگر) برای بلاک کردن ربات‌های مخرب.

محدودیت نرخ (Rate Limiting) برای جلوگیری از حملات Brute Force.

به‌روزرسانی مداوم نرم‌افزارها و کتابخانه‌ها.

پنل مدیریت (بسیار منعطف و با قابلیت‌های خفن):

ایمیل مدیر اصلی: WQSDBEW003@GMAIL.COM

اضافه کردن ایمیل‌های کنترلی بیشتر.

مدیریت کاربران (بن کردن، تغییر نقش، مشاهده فعالیت).

مدیریت دسته‌بندی‌ها: افزودن، ویرایش، حذف.

تنظیم تم بصری هر دسته‌بندی (رنگ‌ها، وکتورها) از طریق پنل.

مدیریت تاپیک‌ها: حذف، بلد کردن (highlight)، پین کردن (برای پیشنهاد بیشتر در صفحه اصلی).

من تیک "ور ور" (تأیید شده/ویژه) برای تاپیک‌ها دارم.

مشاهده گزارشات و آمار: بازدیدها، کاربران، تاپیک‌های پربازدید و ...

مدیر باید بتواند به سادگی از پنل مدیریت، تم جدید برای دسته‌بندی‌ها بسازد و اعمال کند.

مسیر دسترسی به پنل ادمین (مثلاً /admin) باید امن باشد.

قابلیت‌های دیگر:

پیام‌رسانی خصوصی (Direct Messaging) بین کاربران.

مدیریت محتوا توسط کاربران: امکان گزارش دادن (Report) تاپیک‌ها یا کامنت‌های نامناسب. سیستمی برای مدیران/ناظران برای بررسی گزارش‌ها.

مدیریت دسترسی‌ها: سطوح دسترسی مختلف (مدیر، کاربر عادی، مهمان).

هر تاپیک زمان انتشار بسیار مهمی دارد و باید نمایش داده شود.

تکنولوژی‌های مورد استفاده:

زبان پروژه: فارسی.

بک‌اند: Node.js با فریم‌ورک مناسب (مانند Express.js یا NestJS).

فرانت‌اند: React (با Next.js برای SSR).

پایگاه داده: PostgreSQL (نصب شده روی همان سرور لینوکس).

وب سرور: Nginx یا مشابه برای Reverse Proxy و سرو کردن فایل‌های استاتیک و اعمال تنظیمات امنیتی.

استفاده از کتابخانه‌ها و پلتفرم‌های رایگان و متن‌باز.

ساختار و توسعه‌پذیری:

کل پروژه باید در یک یا چند ریپازیتوری گیت سازماندهی شود (مثلاً یک مونوریپو یا ریپازیتوری‌های جدا برای فرانت و بک).

کدها باید ماژولار، خوانا و با قابلیت نگهداری بالا باشند.

باید طوری طراحی شود که افزودن قابلیت‌های جدید یا تغییر تم‌ها در آینده به راحتی امکان‌پذیر باشد.

قابلیت پشتیبان‌گیری و بازیابی داده‌ها (به خصوص تاپیک‌ها، کامنت‌ها، کاربران) باید در نظر گرفته شود. امکان وارد کردن داده‌ها از یک فایل (مثلاً فایل زیپ حاوی JSON یا CSV برای تاپیک‌ها و کامنت‌ها) باید به عنوان یک ابزار مدیریتی در نظر گرفته شود.

نحوه تحویل و اجرا توسط من:

تو کل پروژه را آماده می‌کنی (کدها، ساختار دایرکتوری‌ها، فایل‌های Dockerfile و docker-compose.yml در صورت استفاده برای سهولت راه‌اندازی).

یک فایل README.md بسیار جامع و دقیق تهیه می‌کنی که شامل موارد زیر باشد:

پیش‌نیازهای سیستمی (نسخه Node، PostgreSQL، و غیره).

نحوه کلون کردن ریپازیتوری.

دستورالعمل گام به گام برای نصب وابستگی‌ها (برای بک‌اند و فرانت‌اند).

نحوه راه‌اندازی و پیکربندی اولیه PostgreSQL (ایجاد دیتابیس، کاربر، اجرای migration ها).

لیست کامل متغیرهای محیطی (.env) که باید تنظیم شوند (شامل کلیدهای API گوگل، اطلاعات دیتابیس، دامنه سایت، SECRET_KEY ها و غیره) و توضیح هر کدام.

دستورات لازم برای ساخت (build) پروژه (فرانت‌اند و بک‌اند).

دستورات لازم برای اجرای پروژه در حالت توسعه (development) و تولید (production).

نحوه اجرای تست‌ها (اگر نوشته‌ای).

توضیح ساختار پروژه و ماژول‌های اصلی.

دستورالعمل برای به‌روزرسانی (مثلاً بعد از git pull چه دستوراتی باید اجرا شوند).

من فقط دستورات مشخص شده در README.md را کپی و پیست خواهم کرد. من کدها را بررسی عمیق نمی‌کنم، پوشه‌ای ایجاد یا جابجا نمی‌کنم یا کد نمی‌نویسم. همه چیز باید از طریق دستورات مشخص و فایل‌های پیکربندی انجام شود.

طراحی و تجربه کاربری (UX):

دقیقاً مانند یوتیوب: یک صفحه اصلی واحد که همه‌چیز را هندل می‌کند. ساده، شیک و کاربرپسند.

هیچ چیز اضافی و پیچیده‌ای نباید در رابط کاربری وجود داشته باشد. مانند سادگی گوگل و یوتیوب.

من از امور دیزاین و سایت هیچی نمی‌دانم. همه چیز را در این امر به تو سپرده‌ام. خودت بفهم و خودت یک شاهکار خلق بنما.

استفاده از سبکی رنگی و طراحی خاص که شکوه و عظمت را نشان دهد اما ساده و سبک باشد.

اندازه تایتل تاپیک‌ها در صفحه اصلی تا حدی داینامیک باشد (بر اساس طول متن)، و اگر خیلی طولانی بود با "..." کوتاه شود. در هنگام ثبت تاپیک جدید، اندازه تایتل برای جلوگیری از طول بیش از حد استاندارد، اعتبارسنجی شود.

ملاحظات نهایی:

سرعت لود بالا و بدون تأخیر. بهینه‌سازی تصاویر و کدها.

به من مدیریت سایت و نحوه تهیه سرور/هاست و مراقبت از آن را آموزش بده (در قالب مستندات).

همه چیز را در مورد همه چیز به من اطلاع بده (در مستندات).

از چیزهای پولی استفاده نکن؛ همه‌چیز رایگان و متن‌باز.

کدهایی چگال (سنگین از نظر قابلیت و کیفیت، نه حجم بیهوده) و تمیز بنویس، بدون کامنت‌های توضیحی غیرضروری درون کد (توضیحات اصلی در README.md یا داکیومنت‌های جداگانه).

هدف این است که پس از git clone و تنظیمات اولیه پیکربندی (که باید به وضوح مستند شده باشند)، اجرای سایت با حداقل دستورات ممکن و بدون نیاز به تغییر دستی کد یا ساختار دایرکتوری‌ها توسط من انجام شود.

دور زدن محدودیت توکن با تقسیم پاسخ‌ها به بخش‌های منطقی اما کامل.

این یک پروژه بسیار طولانی است، پس پله پله تا آخرش پیش برویم (منظورم این است که تو به صورت مرحله‌ای کدها را در پاسخ‌های متوالی تحویل دهی، اما هر بخش باید کامل و قابل استفاده باشد و در نهایت یک کل منسجم را تشکیل دهند).

شروع کن و تا آخرش را بنویس. هر جا احساس کردی که محدودیت توکن داری نزدیک می‌شی، همونجا متوقف شو تا بریم بعدش. بسم الله.
